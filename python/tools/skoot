#!/usr/bin/env python

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import sys, json, optparse, os

from os import sys, path
sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

from entities.nets import Network
from entities.entities import RouterEntity, ConnectorEntity, SslProfileEntity, ConsoleRouteEntity, ListenerEntity
from entities import GENERATED_EXTERNAL_TLS_CERTS_DIR
from entities import MOUNTED_EXTERNAL_TLS_CERTS_DIR

VERSION = "1.0.0"
ROUTER = "Router"
EDGE_ROUTER = "EdgeRouter"
CONNECTOR = "Connect"
CONSOLE="Console"
COMMENT = '#'

class OptionParser(optparse.OptionParser):
    """Adds standard --version option to optparse.OptionParser"""
    def __init__(self, *args, **kwargs):
        optparse.OptionParser.__init__(self, *args, **kwargs)
        def version_cb(*args):
            print("%s" % VERSION)
            exit(0)

        self.add_option("--version", help="Print version and exit.",
                        action="callback", callback=version_cb)

def parse_args(argv):
    usage = "%prog [options]"
    parser = OptionParser(usage=usage)
    group = optparse.OptionGroup(parser, "Test")
    group.add_option("-c", "--config", action="store", type="string", default=None,
                     metavar="CONFIG", help="Configuration file to be read")

    group.add_option("-o", "--output", action="store", type="string", default=None,
                     metavar="OUTPUT", help="Folder to output the yaml files")

    opts, args = parser.parse_args(args=argv)

    # You must specify the config file I intend to read from.
    if not opts.config:
        parser.error("You must specify option: -c.")

    if not opts.output:
        parser.error("You must specify option: -o.")

    print (opts.output)

    return opts, args

def run(argv):
    opts, args = parse_args(argv)

    routers = []
    connectors = []
    console_routes = []
    # Open the config file.
    with open(opts.config, "r") as file:
        for data in file:
            if data and not data.startswith(COMMENT):
                components = data.rstrip().split(" ")
                if components:
                    if components[0] == ROUTER or components[0] == EDGE_ROUTER:
                        router_id = components[1]

                        ssl_profiles = list()

                        router_attributes = dict()
                        ssl_profile = SslProfileEntity({'name': 'skupper-internal',
                                                        'router_id': router_id.lower()})
                        ssl_profiles.append(ssl_profile)

                        ssl_profile = SslProfileEntity(attributes={'name': 'skupper-amqps', 'router_id': router_id.lower()},
                                                       tls_cert_dir=GENERATED_EXTERNAL_TLS_CERTS_DIR,
                                                       mounted_cert_dir=MOUNTED_EXTERNAL_TLS_CERTS_DIR)
                        ssl_profiles.append(ssl_profile)

                        router_attributes['id'] = router_id
                        router_attributes['sslProfiles'] = ssl_profiles
                        if components[0] == ROUTER:
                            router_attributes['mode'] = "interior"
                        elif components[0] == EDGE_ROUTER:
                            router_attributes['mode'] = "edge"

                        try:
                            router_attributes['host'] = components[2]
                        except:
                            pass

                        router_entity = RouterEntity(router_attributes)
                        routers.append(router_entity)
                    elif data.startswith(CONNECTOR):
                        conn_attrs = {"port": "443", 'saslMechanisms': 'EXTERNAL', 'sslProfile': 'skupper-internal',  'verifyHostname': 'no', 'role': 'inter-router'}
                        if len(components) > 3:
                            conn_attrs['cost'] = components[3]

                        connector = ConnectorEntity(components[1], components[2], conn_attrs)
                        connectors.append(connector)
                    elif data.startswith(CONSOLE):
                        router_id = components[1]
                        console_host = components[2]
                        sonsole_route_attrs = {'host': console_host, 'router_id': router_id}
                        console_route = ConsoleRouteEntity(sonsole_route_attrs)
                        console_routes.append(console_route)


    print ("opts.output ", opts.output)
    network = Network(routers=routers, connectors=connectors, console_routes=console_routes, yaml_output_dir=opts.output)
    network.generate_router_configs()


if __name__ == "__main__":
    run(sys.argv)








